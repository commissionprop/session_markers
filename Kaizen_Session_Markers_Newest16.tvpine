//@version=6
indicator("Kaizen Session Markers", overlay=true)

// ======== Timezone Settings ========
timezone_location = input.string("New York (UTC-5 EST/UTC-4 EDT) - Eastern Standard/Eastern Daylight Time", "Timezone Location", 
     options=["New York (UTC-5 EST/UTC-4 EDT) - Eastern Standard/Eastern Daylight Time", "London (UTC+0 GMT/UTC+1 BST) - Greenwich Mean/British Summer Time", "Tokyo (UTC+9 JST) - Japan Standard Time", "Sydney (UTC+10 AEST/UTC+11 AEDT) - Australian Eastern Standard/Daylight Time", "Frankfurt (UTC+1 CET/UTC+2 CEST) - Central European/Central European Summer Time", "Zurich (UTC+1 CET/UTC+2 CEST) - Central European/Central European Summer Time", "Hong Kong (UTC+8 HKT) - Hong Kong Time", "Singapore (UTC+8 SGT) - Singapore Time", "Los Angeles (UTC-8 PST/UTC-7 PDT) - Pacific Standard/Pacific Daylight Time", "Chicago (UTC-6 CST/UTC-5 CDT) - Central Standard/Central Daylight Time", "Toronto (UTC-5 EST/UTC-4 EDT) - Eastern Standard/Eastern Daylight Time", "Vancouver (UTC-8 PST/UTC-7 PDT) - Pacific Standard/Pacific Daylight Time", "Dubai (UTC+4 GST) - Gulf Standard Time", "Mumbai (UTC+5:30 IST) - India Standard Time", "Shanghai (UTC+8 CST) - China Standard Time", "UTC (UTC+0) - Coordinated Universal Time"], 
     group='Timezone')
use_exchange = input(false, 'Use Exchange Timezone', group='Timezone')
show_debug_timezone = input.bool(false, "Show Timezone Debug Label", group='Timezone')

// Add timezone debugging with toggle control
var label debugLabel = na
if barstate.islast and use_exchange and show_debug_timezone
    label.delete(debugLabel)
    debugLabel := label.new(bar_index, high, "Exchange TZ: " + syminfo.timezone, xloc.bar_index, yloc.abovebar, color.yellow, label.style_label_down, color.black, size.normal)
    
// Function to get timezone string from location
get_timezone_from_location(location) =>
    switch location
        "New York (UTC-5 EST/UTC-4 EDT) - Eastern Standard/Eastern Daylight Time" => "America/New_York"
        "London (UTC+0 GMT/UTC+1 BST) - Greenwich Mean/British Summer Time" => "Europe/London"
        "Tokyo (UTC+9 JST) - Japan Standard Time" => "Asia/Tokyo"
        "Sydney (UTC+10 AEST/UTC+11 AEDT) - Australian Eastern Standard/Daylight Time" => "Australia/Sydney"
        "Frankfurt (UTC+1 CET/UTC+2 CEST) - Central European/Central European Summer Time" => "Europe/Berlin"
        "Zurich (UTC+1 CET/UTC+2 CEST) - Central European/Central European Summer Time" => "Europe/Zurich"
        "Hong Kong (UTC+8 HKT) - Hong Kong Time" => "Asia/Hong_Kong"
        "Singapore (UTC+8 SGT) - Singapore Time" => "Asia/Singapore"
        "Los Angeles (UTC-8 PST/UTC-7 PDT) - Pacific Standard/Pacific Daylight Time" => "America/Los_Angeles"
        "Chicago (UTC-6 CST/UTC-5 CDT) - Central Standard/Central Daylight Time" => "America/Chicago"
        "Toronto (UTC-5 EST/UTC-4 EDT) - Eastern Standard/Eastern Daylight Time" => "America/Toronto"
        "Vancouver (UTC-8 PST/UTC-7 PDT) - Pacific Standard/Pacific Daylight Time" => "America/Vancouver"
        "Dubai (UTC+4 GST) - Gulf Standard Time" => "Asia/Dubai"
        "Mumbai (UTC+5:30 IST) - India Standard Time" => "Asia/Kolkata"
        "Shanghai (UTC+8 CST) - China Standard Time" => "Asia/Shanghai"
        "UTC (UTC+0) - Coordinated Universal Time" => "UTC"
        => "UTC"

// Calculate timezone string based on settings
get_timezone() =>
    if use_exchange
        syminfo.timezone
    else
        get_timezone_from_location(timezone_location)

// Get the timezone to use
timezone = get_timezone()

// ======== Display Switches ========
showLondon       = input.bool(true, "Show London High/Low")
showNewYork      = input.bool(true, "Show New York High/Low")
showAsia         = input.bool(true, "Show Asia High/Low")
showHighOfDay    = input.bool(true, "Show High of Day")
showLowOfDay     = input.bool(true, "Show Low of Day")
showPrevDayHOD   = input.bool(true, "Show Previous Day HOD")
showPrevDayLOD   = input.bool(true, "Show Previous Day LOD")
showMidnightOpen = input.bool(true, "Show Midnight Open")
showSessionBorders = input.bool(true, "Show Session Borders")
showBorderLabels = input.bool(true, "Show Session Border Labels")
showAllTimeHigh  = input.bool(true, "Show All-Time High")

// ======== Session Time Inputs ========
londonSession = input.session("0300-0830", "London Session Time", group='Sessions')
newYorkSession = input.session("0930-1600", "New York Session Time", group='Sessions')
asiaSession = input.session("1800-0300", "Asia Session Time", group='Sessions')

// ======== Line Style Settings ========
londonColor   = input.color(color.new(#00B7EB, 50), "London Line Color")
newYorkColor  = input.color(color.new(#FF0000, 50), "New York Line Color")
asiaColor     = input.color(color.new(#FFFF00, 50), "Asia Line Color")
hodColor      = input.color(color.new(#00FF00, 50), "High of Day Line Color")
lodColor      = input.color(color.new(#FF4500, 50), "Low of Day Line Color")
prevHodColor  = input.color(color.new(#32CD32, 50), "Previous Day HOD Color")
prevLodColor  = input.color(color.new(#FF00FF, 50), "Previous Day LOD Color")
midnightOpenColor = input.color(color.new(#00FFFF, 50), "Midnight Open Color")
sessionBorderColor = input.color(color.new(#808080, 30), "Session Border Color")
athColor      = input.color(color.new(#FFD700, 30), "All-Time High Color")

// ======== Line widths (fixed values) ========
londonWidth = 1
newYorkWidth = 1
asiaWidth = 1
hodWidth = 1
lodWidth = 1
prevHodWidth = 1
prevLodWidth = 1
midnightOpenWidth = 1
sessionBorderWidth = 1
athWidth = 1

// ======== DST Judgment Functions ========
isLondonDST() =>
    _m = month(time)
    _d = dayofmonth(time)
    _dow = dayofweek(time)
    _lastSunMar = (_m == 3 and _dow == dayofweek.sunday and _d >= 25)
    _lastSunOct = (_m == 10 and _dow == dayofweek.sunday and _d >= 25)
    (_m > 3 and _m < 10) or _lastSunMar or not _lastSunOct

isNewYorkDST() =>
    _m = month(time)
    _d = dayofmonth(time)
    _dow = dayofweek(time)
    _secondSunMar = (_m == 3 and _dow == dayofweek.sunday and _d >= 8 and _d <= 14)
    _firstSunNov  = (_m == 11 and _dow == dayofweek.sunday and _d <= 7)
    (_m > 3 and _m < 11) or _secondSunMar or not _firstSunNov

// ======== Session Time Calculations ========
// Use the dynamic timezone from settings
inLondonSession = not na(time(timeframe.period, londonSession, timezone))
inNewYorkSession = not na(time(timeframe.period, newYorkSession, timezone))
inAsiaSession = not na(time(timeframe.period, asiaSession, timezone))

// ======== Session Switch Detection ========
isLondonSessionStart = inLondonSession and not inLondonSession[1]
isLondonSessionEnd   = not inLondonSession and inLondonSession[1]

isNewYorkSessionStart = inNewYorkSession and not inNewYorkSession[1]
isNewYorkSessionEnd   = not inNewYorkSession and inNewYorkSession[1]

isAsiaSessionStart = inAsiaSession and not inAsiaSession[1]
isAsiaSessionEnd   = not inAsiaSession and inAsiaSession[1]

// ======== High of Day Detection ========
// Use the selected timezone for proper day detection
isNewTradingDay = ta.change(dayofmonth(time, timezone)) != 0

// ======== Midnight Open Detection ========
// Use selected timezone for consistent midnight detection
midnightHour = hour(time, timezone)
midnightMinute = minute(time, timezone)
isMidnight = midnightHour == 0 and midnightMinute == 0

// ======== Initialize Variables ========
var float londonHigh = na
var float londonLow = na
var int londonHighBar = na
var int londonLowBar = na
var int londonHighStartBar = na
var int londonLowStartBar = na

var float newYorkHigh = na
var float newYorkLow = na
var int newYorkHighBar = na
var int newYorkLowBar = na
var int newYorkHighStartBar = na
var int newYorkLowStartBar = na

var float asiaHigh = na
var float asiaLow = na
var int asiaHighBar = na
var int asiaLowBar = na
var int asiaHighStartBar = na
var int asiaLowStartBar = na

var float dailyHigh = na
var int dailyHighBar = na
var int dailyHighStartBar = na

var float dailyLow = na
var int dailyLowBar = na
var int dailyLowStartBar = na

var float prevDayHigh = na
var float prevDayLow = na
var float midnightOpen = na

var line londonHighLine = na
var line londonLowLine = na

var line newYorkHighLine = na
var line newYorkLowLine = na

var line asiaHighLine = na
var line asiaLowLine = na

var line dailyHighLine = na
var line dailyLowLine = na

var line prevDayHighLine = na
var line prevDayLowLine = na

var line midnightOpenLine = na

var line londonStartLine = na
var line londonEndLine = na
var line newYorkStartLine = na
var line newYorkEndLine = na
var line asiaStartLine = na
var line asiaEndLine = na

// ======== Text Label Variables ========
var label londonHighTextLabel = na
var label londonLowTextLabel = na
var label newYorkHighTextLabel = na
var label newYorkLowTextLabel = na
var label asiaHighTextLabel = na
var label asiaLowTextLabel = na

// ======== IMPROVED All-Time High Logic ========
// Get true all-time high using multiple timeframes for maximum coverage
var float allTimeHigh = na
var bool isNewATH = false
var label athLabel = na
var line allTimeHighLine = na

// Get high values from multiple timeframes to ensure we capture the true ATH
weeklyHigh = request.security(syminfo.tickerid, "1W", high, lookahead=barmerge.lookahead_off)
monthlyHigh = request.security(syminfo.tickerid, "1M", high, lookahead=barmerge.lookahead_off)
yearlyHigh = request.security(syminfo.tickerid, "12M", high, lookahead=barmerge.lookahead_off)

// Initialize ATH with the highest available value from different timeframes
if barstate.isfirst
    allTimeHigh := math.max(math.max(weeklyHigh, monthlyHigh), math.max(yearlyHigh, high))

// Track the running maximum from all timeframe data
currentMaxHigh = math.max(math.max(weeklyHigh, monthlyHigh), math.max(yearlyHigh, high))

// Update ATH if we find a higher value
if currentMaxHigh > allTimeHigh and not na(currentMaxHigh)
    allTimeHigh := currentMaxHigh
    isNewATH := true
else
    isNewATH := false

// Additional check: compare with ta.highest over maximum lookback
// This helps catch historical highs that might not be captured by security calls
historicalHigh = ta.highest(high, 5000)  // Max lookback Pine Script allows
if historicalHigh > allTimeHigh and not na(historicalHigh)
    allTimeHigh := historicalHigh
    isNewATH := true

// Update ATH with current bar's high if it's higher
if high > allTimeHigh
    allTimeHigh := high
    isNewATH := true

// Draw/update ATH line
if showAllTimeHigh
    if isNewATH or barstate.islast
        line.delete(allTimeHighLine)
        allTimeHighLine := line.new(bar_index - 50, allTimeHigh, bar_index, allTimeHigh, xloc.bar_index, extend.right, athColor, line.style_solid, athWidth)

// Create ATH label on actual new highs
if isNewATH and showAllTimeHigh and high >= allTimeHigh
    label.delete(athLabel)
    athLabel := label.new(bar_index, allTimeHigh, "ATH", xloc.bar_index, yloc.abovebar, athColor, label.style_label_down, color.white, size.normal, text.align_center)

// ======== Update High of Day and Previous Day Levels ========
if isNewTradingDay
    // Store previous day's high and low before resetting
    prevDayHigh := dailyHigh
    prevDayLow := dailyLow
    
    // Reset current day's high and low based on timezone
    dailyHigh := high
    dailyLow := low
    dailyHighBar := bar_index
    dailyHighStartBar := bar_index
    dailyLowBar := bar_index
    dailyLowStartBar := bar_index
    
    // Clean up previous day's current HOD and LOD lines
    line.delete(dailyHighLine)
    line.delete(dailyLowLine)
    
    // Clean up old previous day lines
    line.delete(prevDayHighLine)
    line.delete(prevDayLowLine)
    
    // Draw previous day's HOD and LOD if they exist and are enabled
    if showPrevDayHOD and not na(prevDayHigh)
        prevDayHighLine := line.new(bar_index, prevDayHigh, bar_index + 1, prevDayHigh, xloc.bar_index, extend.right, prevHodColor, line.style_solid, prevHodWidth)
        line.set_extend(prevDayHighLine, extend.right)
    
    if showPrevDayLOD and not na(prevDayLow)
        prevDayLowLine := line.new(bar_index, prevDayLow, bar_index + 1, prevDayLow, xloc.bar_index, extend.right, prevLodColor, line.style_solid, prevLodWidth)
        line.set_extend(prevDayLowLine, extend.right)
else
    // Update daily high/low during the same trading day
    if high > dailyHigh
        dailyHigh := high
        dailyHighBar := bar_index
    if low < dailyLow
        dailyLow := low
        dailyLowBar := bar_index

// Initialize dailyHigh and dailyLow on first bar if not set
if barstate.isfirst
    dailyHigh := high
    dailyLow := low
    dailyHighBar := bar_index
    dailyHighStartBar := bar_index
    dailyLowBar := bar_index
    dailyLowStartBar := bar_index

// ======== Update Midnight Open ========
if isMidnight and showMidnightOpen
    midnightOpen := open
    // Clean up previous midnight open line
    line.delete(midnightOpenLine)
    // Draw new midnight open line
    midnightOpenLine := line.new(bar_index, midnightOpen, bar_index + 100, midnightOpen, xloc.bar_index, extend.right, midnightOpenColor, line.style_dashed, midnightOpenWidth)

// Draw High of Day line (continuously updated)
if showHighOfDay and not na(dailyHigh)
    line.delete(dailyHighLine)
    dailyHighLine := line.new(dailyHighStartBar, dailyHigh, dailyHighStartBar + 1, dailyHigh, xloc.bar_index, extend.right, hodColor, line.style_solid, hodWidth)

// Draw Low of Day line (continuously updated)
if showLowOfDay and not na(dailyLow)
    line.delete(dailyLowLine)
    dailyLowLine := line.new(dailyLowStartBar, dailyLow, dailyLowStartBar + 1, dailyLow, xloc.bar_index, extend.right, lodColor, line.style_solid, lodWidth)

// ======== Update London Session ========
if isLondonSessionStart
    londonHigh := high
    londonLow := low
    londonHighBar := bar_index
    londonLowBar := bar_index
    londonHighStartBar := bar_index
    londonLowStartBar := bar_index
    // Draw London session start border
    if showSessionBorders
        londonStartLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add London session start label
    if showBorderLabels
        label.new(bar_index, high, "London Start", xloc.bar_index, yloc.abovebar, londonColor, label.style_label_down, color.white, size.small, text.align_center)
else if inLondonSession
    if high > londonHigh
        londonHigh := high
        londonHighBar := bar_index
    if low < londonLow
        londonLow := low
        londonLowBar := bar_index
else if isLondonSessionEnd and showLondon
    line.delete(londonHighLine)
    line.delete(londonLowLine)
    
    londonHighLine := line.new(londonHighStartBar, londonHigh, bar_index, londonHigh, xloc.bar_index, extend.right, londonColor, line.style_dashed, londonWidth)
    londonLowLine := line.new(londonLowStartBar, londonLow, bar_index, londonLow, xloc.bar_index, extend.right, londonColor, line.style_dashed, londonWidth)
    
    // Draw London session end border
    if showSessionBorders
        londonEndLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add London session end label
    if showBorderLabels
        label.new(bar_index, low, "London End", xloc.bar_index, yloc.belowbar, londonColor, label.style_label_up, color.white, size.small, text.align_center)

// ======== Update New York Session ========
if isNewYorkSessionStart
    newYorkHigh := high
    newYorkLow := low
    newYorkHighBar := bar_index
    newYorkLowBar := bar_index
    newYorkHighStartBar := bar_index
    newYorkLowStartBar := bar_index
    // Draw New York session start border
    if showSessionBorders
        newYorkStartLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add New York session start label
    if showBorderLabels
        label.new(bar_index, high, "NY Start", xloc.bar_index, yloc.abovebar, newYorkColor, label.style_label_down, color.white, size.small, text.align_center)
else if inNewYorkSession
    if high > newYorkHigh
        newYorkHigh := high
        newYorkHighBar := bar_index
    if low < newYorkLow
        newYorkLow := low
        newYorkLowBar := bar_index
else if isNewYorkSessionEnd and showNewYork
    line.delete(newYorkHighLine)
    line.delete(newYorkLowLine)
    
    newYorkHighLine := line.new(newYorkHighStartBar, newYorkHigh, bar_index, newYorkHigh, xloc.bar_index, extend.right, newYorkColor, line.style_dashed, newYorkWidth)
    newYorkLowLine := line.new(newYorkLowStartBar, newYorkLow, bar_index, newYorkLow, xloc.bar_index, extend.right, newYorkColor, line.style_dashed, newYorkWidth)
    
    // Draw New York session end border
    if showSessionBorders
        newYorkEndLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add New York session end label
    if showBorderLabels
        label.new(bar_index, low, "NY End", xloc.bar_index, yloc.belowbar, newYorkColor, label.style_label_up, color.white, size.small, text.align_center)

// ======== Update Asia Session ========
if isAsiaSessionStart
    asiaHigh := high
    asiaLow := low
    asiaHighBar := bar_index
    asiaLowBar := bar_index
    asiaHighStartBar := bar_index
    asiaLowStartBar := bar_index
    // Draw Asia session start border
    if showSessionBorders
        asiaStartLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add Asia session start label
    if showBorderLabels
        label.new(bar_index, high, "Asia Start", xloc.bar_index, yloc.abovebar, asiaColor, label.style_label_down, color.white, size.small, text.align_center)
else if inAsiaSession
    if high > asiaHigh
        asiaHigh := high
        asiaHighBar := bar_index
    if low < asiaLow
        asiaLow := low
        asiaLowBar := bar_index
else if isAsiaSessionEnd and showAsia
    line.delete(asiaHighLine)
    line.delete(asiaLowLine)
    
    asiaHighLine := line.new(asiaHighStartBar, asiaHigh, bar_index, asiaHigh, xloc.bar_index, extend.right, asiaColor, line.style_dashed, asiaWidth)
    asiaLowLine := line.new(asiaLowStartBar, asiaLow, bar_index, asiaLow, xloc.bar_index, extend.right, asiaColor, line.style_dashed, asiaWidth)
    
    // Draw Asia session end border
    if showSessionBorders
        asiaEndLine := line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, sessionBorderColor, line.style_solid, sessionBorderWidth)
    // Add Asia session end label
    if showBorderLabels
        label.new(bar_index, low, "Asia End", xloc.bar_index, yloc.belowbar, asiaColor, label.style_label_up, color.white, size.small, text.align_center)

// ======== Text Labels on Right Side - ONLY FOR COMPLETED SESSIONS ========
// London Session Labels - Only show if NOT currently in London session (completed session)
if showLondon and not na(londonHigh) and not na(londonLow) and not inLondonSession
    label.delete(londonHighTextLabel)
    label.delete(londonLowTextLabel)
    
    londonHighTextLabel := label.new(bar_index, londonHigh, "London High", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, londonColor, size.small, text.align_left)
    londonLowTextLabel := label.new(bar_index, londonLow, "London Low", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, londonColor, size.small, text.align_left)

// New York Session Labels - Only show if NOT currently in New York session (completed session)
if showNewYork and not na(newYorkHigh) and not na(newYorkLow) and not inNewYorkSession
    label.delete(newYorkHighTextLabel)
    label.delete(newYorkLowTextLabel)
    
    newYorkHighTextLabel := label.new(bar_index, newYorkHigh, "New York High", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, newYorkColor, size.small, text.align_left)
    newYorkLowTextLabel := label.new(bar_index, newYorkLow, "New York Low", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, newYorkColor, size.small, text.align_left)

// Asia Session Labels - Only show if NOT currently in Asia session (completed session)
if showAsia and not na(asiaHigh) and not na(asiaLow) and not inAsiaSession
    label.delete(asiaHighTextLabel)
    label.delete(asiaLowTextLabel)
    
    asiaHighTextLabel := label.new(bar_index, asiaHigh, "Asia High", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, asiaColor, size.small, text.align_left)
    asiaLowTextLabel := label.new(bar_index, asiaLow, "Asia Low", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, asiaColor, size.small, text.align_left)

// High of Day Label (continuously updated)
if showHighOfDay and not na(dailyHigh)
    var label hodTextLabel = na
    
    label.delete(hodTextLabel)
    
    hodTextLabel := label.new(bar_index, dailyHigh, "HOD", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, hodColor, size.normal, text.align_left)

// Low of Day Label (continuously updated)
if showLowOfDay and not na(dailyLow)
    var label lodTextLabel = na
    
    label.delete(lodTextLabel)
    
    lodTextLabel := label.new(bar_index, dailyLow, "LOD", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, lodColor, size.normal, text.align_left)

// Previous Day HOD/LOD Labels (static after creation)
if showPrevDayHOD and not na(prevDayHigh)
    var label prevHodTextLabel = na
    
    label.delete(prevHodTextLabel)
    
    prevHodTextLabel := label.new(bar_index, prevDayHigh, "Prev HOD", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, prevHodColor, size.small, text.align_left)

if showPrevDayLOD and not na(prevDayLow)
    var label prevLodTextLabel = na
    
    label.delete(prevLodTextLabel)
    
    prevLodTextLabel := label.new(bar_index, prevDayLow, "Prev LOD", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, prevLodColor, size.small, text.align_left)

// Midnight Open Label (static after creation)
if showMidnightOpen and not na(midnightOpen)
    var label midnightOpenTextLabel = na
    
    label.delete(midnightOpenTextLabel)
    
    midnightOpenTextLabel := label.new(bar_index, midnightOpen, "Midnight Open", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, midnightOpenColor, size.small, text.align_left)

// ======== All-Time High Text Label ========
if showAllTimeHigh and not na(allTimeHigh)
    var label athTextLabel = na
    
    label.delete(athTextLabel)
    
    athTextLabel := label.new(bar_index, allTimeHigh, "ATH", xloc.bar_index, yloc.price, color.new(color.white, 100), label.style_none, athColor, size.normal, text.align_left)